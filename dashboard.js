function getDashboardStats() {
  const logs = getAllHistoryLogs();
  return calculateStats(logs);
}

/**
 * –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∏—Å—Ç–∞ –∑ –ø—ñ–¥—Å—É–º–∫–∞–º–∏
 */
function createOrUpdateDashboard() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let dashboardSheet = ss.getSheetByName("–î–∞—à–±–æ—Ä–¥");

  if (!dashboardSheet) {
    dashboardSheet = ss.insertSheet("–î–∞—à–±–æ—Ä–¥");
  } else {
    dashboardSheet.clear();
  }

  const logs = getAllHistoryLogs();

  if (!logs || !logs.length) {
    dashboardSheet.getRange("A1").setValue("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É.");
    return;
  }

  const stats = calculateStats(logs);

  // === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
  dashboardSheet.appendRow(["üìä –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –¥–∞—à–±–æ—Ä–¥"]);

  // === –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
  dashboardSheet.appendRow(["–í—Å—å–æ–≥–æ –∑–º—ñ–Ω", stats.total]);
  dashboardSheet.appendRow(["–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", stats.uniqueUsers]);
  dashboardSheet.appendRow(["–ê—Ä–∫—É—à—ñ–≤ —É –∂—É—Ä–Ω–∞–ª—ñ", stats.uniqueSheets]);

  // === –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
  dashboardSheet.appendRow(["üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"]);
  Object.entries(stats.userStats).forEach(([user, count]) => {
    dashboardSheet.appendRow([user, count]);
  });

  // === –¢–û–ü –∞—Ä–∫—É—à—ñ–≤ ===
  dashboardSheet.appendRow(["üìÅ –ù–∞–π—á–∞—Å—Ç—ñ—à–µ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –∞—Ä–∫—É—à—ñ"]);
  Object.entries(stats.sheetStats).forEach(([sheet, count]) => {
    dashboardSheet.appendRow([sheet, count]);
  });

  // === –¢–∏–ø–∏ –∑–º—ñ–Ω ===
  dashboardSheet.appendRow(["‚öôÔ∏è –¢–∏–ø–∏ –∑–º—ñ–Ω"]);
  Object.entries(stats.actionStats).forEach(([action, count]) => {
    dashboardSheet.appendRow([action, count]);
  });

  // === –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ –¥–Ω—è—Ö ===
  dashboardSheet.appendRow(["üìÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤"]);
  dashboardSheet.appendRow(["–î–∞—Ç–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω"]);
  stats.dailyStats.forEach(entry => {
    dashboardSheet.appendRow([entry.date, entry.count]);
  });

  dashboardSheet.autoResizeColumns(1, 2);
}

/**
 * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª–æ–≥—ñ–≤
 * @param {Array} logs ‚Äî –∑–∞–ø–∏—Å–∏ –∏–∑ "–õ–æ–≥ –∑–º—ñ–Ω"
 * @returns {Object} –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
function calculateStats(logs) {
  const stats = {
    total: logs.length,
    uniqueUsers: 0,
    uniqueSheets: 0,
    userStats: {},
    sheetStats: {},
    actionStats: {},
    dailyStats: {}
  };

  logs.forEach(log => {
    if (log && log.user) {
      stats.userStats[log.user] = (stats.userStats[log.user] || 0) + 1;
    }

    if (log && log.sheet) {
      stats.sheetStats[log.sheet] = (stats.sheetStats[log.sheet] || 0) + 1;
    }

    if (log && log.action) {
      stats.actionStats[log.action] = (stats.actionStats[log.action] || 0) + 1;
    }

    if (log && log.date) {
      const date = new Date(log.date).toISOString().split('T')[0];
      stats.dailyStats[date] = (stats.dailyStats[date] || 0) + 1;
    }
  });

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  stats.uniqueUsers = Object.keys(stats.userStats).length;
  stats.uniqueSheets = Object.keys(stats.sheetStats).length;

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–ø–æ–≤
  stats.topUsers = Object.entries(stats.userStats)
    .filter(([key, val]) => key !== 'undefined')
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  stats.topSheets = Object.entries(stats.sheetStats)
    .filter(([key, val]) => key !== 'undefined')
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  stats.topActions = Object.entries(stats.actionStats)
    .filter(([key, val]) => key !== 'undefined')
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  const now = new Date();
  const weekAgo = new Date(now.getTime() - 6 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
  const dailyData = [];

  for (let d = new Date(weekAgo); d <= now; d.setDate(d.getDate() + 1)) {
    const dateStr = Utilities.formatDate(d, Session.getScriptTimeZone(), "yyyy-MM-dd");
    dailyData.push({ date: dateStr, count: stats.dailyStats[dateStr] || 0 });
  }

  return {
    ...stats,
    dailyStats: dailyData
  };
}
