// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const SHEET_NAMES = [
  "2 –ë–∞—Ç –ó–∞–≥–∞–ª—å–Ω–∞", "–£–¥–∞—Ä–Ω—ñ –ë–ø–õ–ê", "–†–æ–∑–≤—ñ–¥—É–≤–∞–ª—å–Ω—ñ –ë–ø–õ–ê", "–ù–†–ö", "–ü–ü–û",
  "–ù–°–û –ë–¢", "–ê–¢", "–ó–∞—Å–æ–±–∏ —É—Ä–∞–∂–µ–Ω–Ω—è", "–ó–ë–ë —Ç–∞ –†", "–†–ï–ë", "–û–ø—Ç–∏–∫–∞", "–†–õ–°"
];
const LOG_SHEET_NAME = "–õ–æ–≥ –∑–º—ñ–Ω";
const COLOR_GREEN = "#b6d7a8";
const IMPORTANT_RANGES = {
  "2 –ë–∞—Ç –ó–∞–≥–∞–ª—å–Ω–∞": ["A1:C5"],
  "–ê–¢": ["B2:D6"]
};

// === –ú–µ–Ω—é –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–∞–π–ª—É ===
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu("–î—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü–µ—é")
    .addItem("–†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω", "checkChanges")
    .addItem("–ó–≤—ñ—Ç –ø–æ –¥—ñ—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "showUsersActionReport")
    .addSeparator()
    .addItem("–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∑–∞ —ñ—Å—Ç–æ—Ä—ñ—î—é", "showRestoreHistoryDialog")
    .addItem("–ü–æ—à—É–∫ –ø–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–º—ñ–Ω", "showHistorySearchDialog")
    .addItem("–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∞—Ä–∫—É—à –∑ –ª–æ–≥—É", "showRestoreFromLogDialog") // –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É!
    .addItem("–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω", "showHistorySearchDialog") // ‚Üê –ù–æ–≤–∏–π –ø—É–Ω–∫—Ç: —Ç–µ–∂ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É
    .addSeparator()
    .addItem("–û–Ω–æ–≤–∏—Ç–∏ –¥–∞—à–±–æ—Ä–¥", "createOrUpdateDashboard")
    .addItem("–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∫–æ–º—ñ—Ä–∫–∏", "showAddCommentDialog")
    .addItem("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ", "showCommentsDialog")
    .addSeparator()
    .addItem("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—é/—Ñ–æ—Ä–º–∞—Ç–∏", "runValidation")
    .addItem("–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∑–≤—ñ—Ç (–∫–æ–ø—ñ—é)", "createPublicReport")
    .addSeparator()
    // –ù–æ–≤—ñ –ø—É–Ω–∫—Ç–∏: –µ–∫—Å–ø–æ—Ä—Ç —ñ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—è –ª–æ–≥—ñ–≤
    .addItem("–ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—É —É Excel", "exportLogSheetAsExcel")
    .addItem("–ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—É —É CSV", "exportLogSheetAsCSV")
    .addItem("–ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —É CSV", "exportHistoryToCSV") // ‚Üê –ù–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    .addItem("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", "showHistoryAnalytics") // ‚Üê –ù–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    .addItem("–ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è –ª–æ–≥—ñ–≤", "archiveLogHistory")
    .addItem("–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∏–≥–µ—Ä –Ω–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—é", "createDailyArchiveTrigger")
    .addItem("–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –±–µ–∫–∞–ø–∏", "cleanupOldBackups");

  menu.addToUi();

  setupLogSheet();

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞
  addHistorySearchMenu(); // <-- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ history_search.js
}

/**
 * –î—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞ –∑ –ª–æ–≥—É (–∫–Ω–æ–ø–∫–∞ —É –º–µ–Ω—é)
 */
function showRestoreFromLogDialog() {
  const html = HtmlService.createHtmlOutputFromFile('restore_from_log_dialog')
    .setWidth(500)
    .setHeight(400);
  SpreadsheetApp.getUi().showModalDialog(html, "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞ –∑ –ª–æ–≥—É");
}

function showDashboardDialog() {
  const html = HtmlService.createHtmlOutputFromFile('dashboard_dialog')
    .setWidth(900)
    .setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, 'üìä –î–∞—à–±–æ—Ä–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
}

// === –û—Å–Ω–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω ===
function checkChanges() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const props = PropertiesService.getScriptProperties();
  SHEET_NAMES.forEach(sheetName => {
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    if (!Array.isArray(values)) return;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ö—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö
    const currentHash = JSON.stringify(values);
    const storedHashKey = `prevDataHash_${sheetName}`;
    const storedValuesKey = `prevValues_${sheetName}`;
    const storedHash = props.getProperty(storedHashKey);

    let oldValues = [];
    if (storedHash) {
      const old = props.getProperty(storedValuesKey);
      oldValues = old ? JSON.parse(old) : values.map(row => row.map(() => null));
    } else {
      oldValues = values.map(row => row.map(() => null));
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (
      storedHash &&
      storedHash !== currentHash &&
      Array.isArray(values) &&
      Array.isArray(oldValues) &&
      values.length > 0 &&
      oldValues.length > 0
    ) {
      highlightChanges(sheet, oldValues, values);
      logChanges(sheet, oldValues, values);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    if (
      Array.isArray(oldValues) &&
      Array.isArray(values) &&
      oldValues.length !== values.length
    ) {
      const type = oldValues.length < values.length ? "–î–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫" : "–í–∏–¥–∞–ª–µ–Ω–æ —Ä—è–¥–æ–∫";
      logRowOrColumnAction(sheet, type, oldValues.length, values.length);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    if (
      Array.isArray(oldValues) && Array.isArray(values) &&
      oldValues.length > 0 && values.length > 0 &&
      oldValues[0].length !== values[0].length
    ) {
      const type = oldValues[0].length < values[0].length ? "–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å" : "–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å";
      logRowOrColumnAction(sheet, type, oldValues[0].length, values[0].length);
    }

    props.setProperty(storedHashKey, currentHash);
    props.setProperty(storedValuesKey, JSON.stringify(values));
  });
}

// === –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –∑–º—ñ–Ω–µ–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫ ===
function highlightChanges(sheet, oldValues, newValues) {
  if (!Array.isArray(newValues) || !Array.isArray(oldValues)) return;
  for (let row = 0; row < newValues.length; row++) {
    for (let col = 0; col < newValues[row].length; col++) {
      const oldValue = (oldValues[row] || [])[col];
      const newValue = newValues[row][col];
      if (oldValue !== newValue) {
        const cell = sheet.getRange(row + 1, col + 1);
        // –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É –∑–º—ñ–Ω–∏
        if ((oldValue === "" || oldValue === null) && newValue !== "") {
          // –ë—É–ª–æ –ø—É—Å—Ç–æ -> —Å—Ç–∞–ª–æ —â–æ—Å—å (–¥–æ–¥–∞–≤–∞–Ω–Ω—è)
          cell.setBackground("#b6d7a8"); // –ó–µ–ª–µ–Ω–∏–π
        } else if (oldValue !== "" && (newValue === "" || newValue === null)) {
          // –ë—É–ª–æ —â–æ—Å—å -> —Å—Ç–∞–ª–æ –ø—É—Å—Ç–æ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è)
          cell.setBackground("#ea9999"); // –ß–µ—Ä–≤–æ–Ω–∏–π
        } else {
          // –ë—É–¥—å-—è–∫–∞ —ñ–Ω—à–∞ –∑–º—ñ–Ω–∞ (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
          cell.setBackground("#ffe599"); // –ñ–æ–≤—Ç–∏–π
        }
      }
    }
  }
}

// === –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–Ω–∞—á–µ–Ω—å –∑ —Ç–∏–ø–æ–º –¥—ñ—ó ===
function logChanges(sheet, oldValues, newValues) {
  if (!sheet || !Array.isArray(newValues) || !Array.isArray(oldValues)) return;
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(LOG_SHEET_NAME);
  const user = Session.getActiveUser().getEmail();
  const time = new Date();
  let changes = [];
  for (let row = 0; row < newValues.length; row++) {
    const newRow = newValues[row] || [];
    const oldRow = oldValues[row] || [];
    for (let col = 0; col < newRow.length; col++) {
      const oldValue = (oldRow[col] !== undefined ? oldRow[col] : "");
      const newValue = (newRow[col] !== undefined ? newRow[col] : "");
      if (oldValue !== newValue) {
        const cell = sheet.getRange(row + 1, col + 1);
        let formula = cell.getFormula();
        if (formula) formula = "=" + formula;
        const important = isImportantCell(sheet.getName(), row + 1, col + 1) ? "–¢–∞–∫" : "–ù—ñ";
        // –¢–∏–ø –¥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑–º—ñ–Ω–∏:
        let changeType = "";
        if ((oldValue === "" || oldValue === null) && newValue !== "") {
          changeType = "–î–æ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è";
        } else if (oldValue !== "" && (newValue === "" || newValue === null)) {
          changeType = "–í–∏–¥–∞–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è";
        } else {
          changeType = "–ó–º—ñ–Ω–µ–Ω–æ";
        }
        changes.push([
          time,
          user,
          sheet.getName(),
          cell.getA1Notation(),
          changeType,
          oldValue,
          newValue,
          formula || "",
          important
        ]);
      }
    }
  }
  if (changes.length > 0) {
    logSheet.getRange(logSheet.getLastRow() + 1, 1, changes.length, 9).setValues(changes);
  }
}

// === –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤/—Å—Ç–æ–≤–ø—Ü—ñ–≤ ===
function logRowOrColumnAction(sheet, type, oldLen, newLen) {
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(LOG_SHEET_NAME);
  const user = Session.getActiveUser().getEmail();
  const time = new Date();
  let actionDesc = "";
  let sheetName = (sheet && typeof sheet.getName === "function") ? sheet.getName() : "[–Ω–µ–≤—ñ–¥–æ–º–∏–π –ª–∏—Å—Ç]";

  if (type === "–î–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫") {
    actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
  } else if (type === "–í–∏–¥–∞–ª–µ–Ω–æ —Ä—è–¥–æ–∫") {
    actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
  } else if (type === "–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å") {
    actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
  } else if (type === "–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å") {
    actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
  } else {
    actionDesc = `–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–º—ñ–Ω–∏: ${type}`;
  }
  logSheet.appendRow([
    time,
    user,
    sheetName,
    "",
    type,
    actionDesc,
    "",
    "",
    ""
  ]);
}

// === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö –∫–æ–º—ñ—Ä–æ–∫ ===
function isImportantCell(sheetName, row, col) {
  if (!IMPORTANT_RANGES[sheetName]) return false;
  for (const rangeStr of IMPORTANT_RANGES[sheetName]) {
    const range = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName).getRange(rangeStr);
    if (
      row >= range.getRow() &&
      row < range.getRow() + range.getNumRows() &&
      col >= range.getColumn() &&
      col < range.getColumn() + range.getNumColumns()
    ) {
      return true;
    }
  }
  return false;
}

// === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞ –¥–ª—è –ª–æ–≥—ñ–≤ ===
function setupLogSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let logSheet = ss.getSheetByName(LOG_SHEET_NAME);
  if (!logSheet) {
    logSheet = ss.insertSheet(LOG_SHEET_NAME);
    const headers = [[
      "–ß–∞—Å –∑–º—ñ–Ω–∏",
      "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
      "–ê—Ä–∫—É—à",
      "–ê–¥—Ä–µ—Å–∞",
      "–¢–∏–ø –¥—ñ—ó",
      "–ë—É–ª–æ",
      "–°—Ç–∞–ª–æ",
      "–§–æ—Ä–º—É–ª–∞",
      "–í–∞–∂–ª–∏–≤–∞ –∑–º—ñ–Ω–∞"
    ]];
    logSheet.getRange(1, 1, 1, headers[0].length).setValues(headers);
    logSheet.autoResizeColumns(1, headers[0].length);
  }
}


function getAllHistoryLogs() {
  const logs = google.script.run.withSuccessHandler(function(logs){
    if (!logs || !logs.length) {
      showStatus('–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É', 'error');
      return [];
    }
    return logs;
  }).getAllHistoryLogs();
}

function exportHistoryToCSV() {
  const logs = getAllHistoryLogs();
  if (!logs.length) {
    showStatus('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!', 'error');
    return;
  }

  const headers = ['–î–∞—Ç–∞/—á–∞—Å', '–ê—Ä–∫—É—à', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', '–î—ñ—è', '–ê–¥—Ä–µ—Å–∞', '–ë—É–ª–æ', '–°—Ç–∞–ª–æ'];
  const rows = [headers].concat(
    logs.map(r => [
      r.dateTime || r.date, r.sheet, r.user, r.action, r.address, r.oldValue, r.newValue
    ])
  );
  const csv = rows.map(row => row.map(cell =>
    `"${(cell||'').toString().replace(/"/g,'""')}"`
  ).join(',')).join('\r\n');

  const blob = new Blob([csv], {type:'text/csv'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'history_search_export.csv';
  document.body.appendChild(a);
  a.click();
  setTimeout(()=>{URL.revokeObjectURL(url);a.remove();},600);
  showStatus('CSV-—Ñ–∞–π–ª —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ.', 'success');
}

function getHistoryAnalytics() {
  const logs = getAllHistoryLogs();
  const users = {};
  const sheets = {};
  const days = {};
  logs.forEach(log => {
    if (log.user) users[log.user] = (users[log.user] || 0) + 1;
    if (log.sheet) sheets[log.sheet] = (sheets[log.sheet] || 0) + 1;
    if (log.date) days[log.date] = (days[log.date] || 0) + 1;
  });
  return { users, sheets, days };
}
